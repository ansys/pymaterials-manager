name: GitHub CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox
      - name: Test with tox
        run: tox -e style

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Running Vale
        uses: errata-ai/vale-action@reviewdog
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          files: doc
          reporter: github-pr-check
          level: error
          filter_mode: nofilter
          fail_on_error: true
          vale_flags: "--config=doc/.vale.ini"

  tests:
    name: Tests and coverage
    runs-on: ${{ matrix.os }}
    needs: [docs , style]
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10']
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox tox-gh-actions
      - name: Test with tox
        # Only the tox environment specified in the tox.ini gh-actions is run
        run: tox -e py310-coverage 
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  mapdl-integration-tests:
    name: Integration tests with MAPDL
    runs-on: ubuntu-latest
    needs: [docs , style]
    if: ${{ github.actor != 'dependabot[bot]' }}
    services:
      mapdl:
        image: ghcr.io/pyansys/pymapdl/mapdl:v23.1.0
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 50052
        env:
          ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
          ANSYS_LOCK: "OFF"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox tox-gh-actions
      - name: Test with tox
        # Only the tox environment specified in the tox.ini gh-actions is run
        run: tox -e py310-coverage -- -m mapdl_integration
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: docs-style
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox
      - name: Generate the documentation with tox
        run: tox -e doc

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: Documentation-html
          path: .tox/doc_out/
          retention-days: 7

  build:
    name: Build library
    runs-on: ubuntu-latest
    needs: [docs, tests, mapdl-integration-tests]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies and build the library
        run: |
          python -m pip install --upgrade pip poetry
          poetry install
          poetry build
          poetry run twine check dist/*
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          path: dist/
          retention-days: 7

  upload_docs:
    name: Upload documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - uses: actions/download-artifact@v3
        with:
          name: Documentation-html
          path: ~/html
  
      # list the content of the current directory
      - name: List directory structure
        run: ls -R

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: ~/html
          branch: gh-pages
          clean: true

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [style, build, docs, tests, mapdl-integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      
      - name: List directory structure
        run: ls -R

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m pip install --upgrade pip twine
          python -m twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz
      
      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.zip
            ./**/*.tar.gz
