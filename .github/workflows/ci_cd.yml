name: GitHub CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  MAPDL_DOCKER_PACKAGE: 'ghcr.io/pyansys/pymapdl/mapdl'
  MAPDL_DOCKER_VERSION: 'v23.1.0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox
      - name: Test with tox
        run: tox -e style

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
  
      - name: Running Vale
        uses: errata-ai/vale-action@reviewdog
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          files: doc
          reporter: github-pr-check
          level: error
          filter_mode: nofilter
          fail_on_error: true
          vale_flags: "--config=doc/.vale.ini"

  tests:
    name: Tests and coverage
    runs-on: ${{ matrix.os }}
    needs: style
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10']
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox tox-gh-actions
      - name: Test with tox
        # Only the tox environment specified in the tox.ini gh-actions is run
        run: tox -e py310-coverage 
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  mapdl-integration-tests:
    name: Integration tests with MAPDL
    runs-on: ubuntu-latest
    needs: style
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      - uses: actions/checkout@v3

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip poetry tox tox-gh-actions

      - name: "Login in Github container registry"
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Start MAPDL"
        run: |
          MAPDL_IMAGE="${{ env.MAPDL_DOCKER_PACKAGE }}:${{ env.MAPDL_DOCKER_VERSION }}"
          docker pull $MAPDL_IMAGE
          docker run \
              --name mapdl \
              --restart always \
              --health-cmd="ps aux | grep \"[/]ansys_inc/.*ansys\.e.*grpc\" -q && echo 0 || echo 1" \
              --health-interval=0.5s \
              --health-retries=4 \
              --health-timeout=0.5s \
              --health-start-period=10s \
              -e ANSYSLMD_LICENSE_FILE=1055@${{ secrets.LICENSE_SERVER }} \
              -e ANSYS_LOCK="OFF" \
              -p 50052:50052 \
              -p 50055:50055 \
              $MAPDL_IMAGE \
              -smp -np 2 > log.txt &
          grep -q 'Server listening on' <(timeout 60 tail -f log.txt)

      - name: "Test with tox"
        # Only the tox environment specified in the tox.ini gh-actions is run
        run: tox -e py310-coverage -- -m mapdl_integration

      - name: "Collect MAPDL logs on failure"
        if: always()
        run: |
          docker exec mapdl /bin/bash -c "mkdir -p /mapdl_logs && echo 'Successfully created directory inside docker container'"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.out' > /dev/null ;then cp -f /file*.out /mapdl_logs && echo 'Successfully copied out files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.err' > /dev/null ;then cp -f /file*.err /mapdl_logs && echo 'Successfully copied err files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.log' > /dev/null ;then cp -f /file*.log /mapdl_logs && echo 'Successfully copied log files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G '*.crash' > /dev/null ;then cp -f /*.crash /mapdl_logs && echo 'Successfully copied crash files.'; fi"
          mkdir ./mapdl_logs 
          docker cp mapdl:/mapdl_logs/. ./mapdl_logs/.
          
      - name: "Tar logs"
        if: always()
        run: |
          cp log.txt ./mapdl_logs/
          tar cvzf ./mapdl_logs.tgz ./mapdl_logs

      - name: "Upload logs to GitHub"
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: mapdl_logs.tgz
          path: ./mapdl_logs.tgz

      - name: "Display MAPDL Logs"
        if: always()
        run: cat log.txt

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: docs-style
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox
      - name: Generate the documentation with tox
        run: tox -e doc

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: Documentation-html
          path: .tox/doc_out/
          retention-days: 7

  build:
    name: Build library
    runs-on: ubuntu-latest
    needs: [docs, tests, mapdl-integration-tests]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install dependencies and build the library
        run: |
          python -m pip install --upgrade pip poetry
          poetry install
          poetry build
          poetry run twine check dist/*
      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          path: dist/
          retention-days: 7

  upload_docs:
    name: Upload documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - uses: actions/download-artifact@v3
        with:
          name: Documentation-html
          path: ~/html
  
      # list the content of the current directory
      - name: List directory structure
        run: ls -R

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          folder: ~/html
          branch: gh-pages
          clean: true

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      
      - name: List directory structure
        run: ls -R

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m pip install --upgrade pip twine
          python -m twine upload --skip-existing ./**/*.whl
          python -m twine upload --skip-existing ./**/*.tar.gz
      
      - name: Release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.zip
            ./**/*.tar.gz
